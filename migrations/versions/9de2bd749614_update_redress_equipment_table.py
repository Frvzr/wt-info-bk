"""update redress equipment table

Revision ID: 9de2bd749614
Revises: 285663b4845b
Create Date: 2025-05-20 09:07:48.825346

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9de2bd749614'
down_revision: Union[str, None] = '285663b4845b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('redress_equipment', sa.Column('level_id', sa.UUID(), nullable=True))
    op.add_column('redress_equipment', sa.Column('tag_id', sa.UUID(), nullable=True))
    op.add_column('redress_equipment', sa.Column('top_tool', sa.UUID(), nullable=True))
    op.add_column('redress_equipment', sa.Column('location_id', sa.UUID(), nullable=False))
    op.alter_column('redress_equipment', 'completed_to',
               existing_type=sa.VARCHAR(length=32),
               nullable=True)
    op.drop_constraint('redress_equipment_assigned_to_key', 'redress_equipment', type_='unique')
    op.drop_constraint('redress_equipment_completed_to_key', 'redress_equipment', type_='unique')
    op.drop_constraint('redress_equipment_location_fkey', 'redress_equipment', type_='foreignkey')
    op.drop_constraint('redress_equipment_tag_fkey', 'redress_equipment', type_='foreignkey')
    op.create_foreign_key(None, 'redress_equipment', 'location', ['location_id'], ['id'])
    op.create_foreign_key(None, 'redress_equipment', 'statuses', ['tag_id'], ['id'])
    op.create_foreign_key(None, 'redress_equipment', 'asset', ['top_tool'], ['id'])
    op.create_foreign_key(None, 'redress_equipment', 'service_level', ['level_id'], ['id'])
    op.create_table_comment(
        'redress_equipment',
        'Таблица с проведенным редресом оборудованием',
        existing_comment='Таблица с оборудованием после обслуживания',
        schema=None
    )
    op.drop_column('redress_equipment', 'tag')
    op.drop_column('redress_equipment', 'location')
    op.create_unique_constraint(None, 'types', ['id'])
    op.create_unique_constraint(None, 'units', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'units', type_='unique')
    op.drop_constraint(None, 'types', type_='unique')
    op.add_column('redress_equipment', sa.Column('location', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('redress_equipment', sa.Column('tag', sa.UUID(), autoincrement=False, nullable=False))
    op.create_table_comment(
        'redress_equipment',
        'Таблица с оборудованием после обслуживания',
        existing_comment='Таблица с проведенным редресом оборудованием',
        schema=None
    )
    op.drop_constraint(None, 'redress_equipment', type_='foreignkey')
    op.drop_constraint(None, 'redress_equipment', type_='foreignkey')
    op.drop_constraint(None, 'redress_equipment', type_='foreignkey')
    op.drop_constraint(None, 'redress_equipment', type_='foreignkey')
    op.create_foreign_key('redress_equipment_tag_fkey', 'redress_equipment', 'statuses', ['tag'], ['id'])
    op.create_foreign_key('redress_equipment_location_fkey', 'redress_equipment', 'location', ['location'], ['id'])
    op.create_unique_constraint('redress_equipment_completed_to_key', 'redress_equipment', ['completed_to'])
    op.create_unique_constraint('redress_equipment_assigned_to_key', 'redress_equipment', ['assigned_to'])
    op.alter_column('redress_equipment', 'completed_to',
               existing_type=sa.VARCHAR(length=32),
               nullable=False)
    op.drop_column('redress_equipment', 'location_id')
    op.drop_column('redress_equipment', 'top_tool')
    op.drop_column('redress_equipment', 'tag_id')
    op.drop_column('redress_equipment', 'level_id')
    # ### end Alembic commands ###
