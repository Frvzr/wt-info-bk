"""refactor name of tables

Revision ID: f42a6f58976c
Revises: 5c2a598463a1
Create Date: 2025-05-05 22:43:58.147686

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f42a6f58976c'
down_revision: Union[str, None] = '5c2a598463a1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('redress_steps',
    sa.Column('redress_id', sa.UUID(), nullable=False),
    sa.Column('step_id', sa.UUID(), nullable=False),
    sa.Column('answer', sa.String(length=300), nullable=True),
    sa.Column('technician', sa.String(length=32), nullable=True),
    sa.Column('completed_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['step_id'], ['checklist_steps.id'], ),
    sa.PrimaryKeyConstraint('redress_id', 'step_id')
    )
    op.create_table('redress_equipment',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('asset_id', sa.UUID(), nullable=False),
    sa.Column('template_id', sa.UUID(), nullable=False),
    sa.Column('level', sa.UUID(), nullable=False),
    sa.Column('location', sa.UUID(), nullable=False),
    sa.Column('completed_technician', sa.String(length=32), nullable=False),
    sa.Column('completed_date', sa.DateTime(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.ForeignKeyConstraint(['level'], ['service_level.id'], ),
    sa.ForeignKeyConstraint(['location'], ['location.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['template_equipment.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.drop_table('service_steps')
    op.drop_table('service_equipment')
    op.alter_column('asset', 'status',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_unique_constraint(None, 'statuses', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'statuses', type_='unique')
    op.alter_column('asset', 'status',
               existing_type=sa.UUID(),
               nullable=False)
    op.create_table('service_equipment',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('asset_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('level', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('location', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('completed_technician', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], name='service_equipment_asset_id_fkey'),
    sa.ForeignKeyConstraint(['level'], ['service_level.id'], name='service_equipment_level_fkey'),
    sa.ForeignKeyConstraint(['location'], ['location.id'], name='service_equipment_location_fkey'),
    sa.ForeignKeyConstraint(['template_id'], ['template_equipment.id'], name='service_equipment_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_equipment_pkey'),
    sa.UniqueConstraint('id', name='service_equipment_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('service_steps',
    sa.Column('service_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('step_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('technician', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('completed_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['service_id'], ['service_equipment.id'], name='service_steps_service_id_fkey'),
    sa.ForeignKeyConstraint(['step_id'], ['checklist_steps.id'], name='service_steps_step_id_fkey'),
    sa.PrimaryKeyConstraint('service_id', 'step_id', name='service_steps_pkey')
    )
    op.drop_table('redress_equipment')
    op.drop_table('redress_steps')
    # ### end Alembic commands ###
