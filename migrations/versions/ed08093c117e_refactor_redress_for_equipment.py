"""refactor redress for equipment

Revision ID: ed08093c117e
Revises: f42a6f58976c
Create Date: 2025-05-05 23:22:36.031161

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ed08093c117e'
down_revision: Union[str, None] = 'f42a6f58976c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('checklist_templates', sa.Column('name', sa.String(length=32), nullable=False))
    op.add_column('checklist_templates', sa.Column('description', sa.String(length=256), nullable=False))
    op.add_column('redress_equipment', sa.Column('assigned_to', sa.String(length=32), nullable=False))
    op.add_column('redress_equipment', sa.Column('status', sa.String(length=16), nullable=False))
    op.add_column('redress_equipment', sa.Column('comment', sa.Text(), nullable=False))
    op.create_unique_constraint(None, 'redress_equipment', ['id'])
    op.create_unique_constraint(None, 'redress_equipment', ['assigned_to'])
    op.create_unique_constraint(None, 'redress_equipment', ['comment'])
    op.drop_constraint('redress_equipment_level_fkey', 'redress_equipment', type_='foreignkey')
    op.drop_column('redress_equipment', 'completed_technician')
    op.drop_column('redress_equipment', 'level')
    op.drop_column('redress_equipment', 'is_completed')
    op.add_column('redress_steps', sa.Column('id', sa.UUID(), nullable=False))
    op.add_column('redress_steps', sa.Column('comment', sa.Text(), nullable=False))
    op.alter_column('redress_steps', 'answer',
                    type_=sa.JSON(),
                    postgresql_using='answer::json',
                    existing_nullable=True)
    op.create_unique_constraint(None, 'redress_steps', ['id'])
    op.create_unique_constraint(None, 'redress_steps', ['comment'])
    op.create_foreign_key(None, 'redress_steps', 'redress_equipment', ['redress_id'], ['id'])
    op.drop_constraint('template_equipment_equipment_id_fkey', 'template_equipment', type_='foreignkey')
    op.create_foreign_key(None, 'template_equipment', 'item', ['equipment_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'template_equipment', type_='foreignkey')
    op.create_foreign_key('template_equipment_equipment_id_fkey', 'template_equipment', 'equipment', ['equipment_id'], ['id'])
    op.drop_constraint(None, 'redress_steps', type_='foreignkey')
    op.drop_constraint(None, 'redress_steps', type_='unique')
    op.drop_constraint(None, 'redress_steps', type_='unique')
    op.alter_column(
        'redress_steps',
        'answer',
        type_=sa.Text(),
        postgresql_using='answer::text'
    )
    op.drop_column('redress_steps', 'comment')
    op.drop_column('redress_steps', 'id')
    op.add_column('redress_equipment', sa.Column('is_completed', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('redress_equipment', sa.Column('level', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('redress_equipment', sa.Column('completed_technician', sa.VARCHAR(length=32), autoincrement=False, nullable=False))
    op.create_foreign_key('redress_equipment_level_fkey', 'redress_equipment', 'service_level', ['level'], ['id'])
    op.drop_constraint(None, 'redress_equipment', type_='unique')
    op.drop_constraint(None, 'redress_equipment', type_='unique')
    op.drop_constraint(None, 'redress_equipment', type_='unique')
    op.drop_column('redress_equipment', 'comment')
    op.drop_column('redress_equipment', 'status')
    op.drop_column('redress_equipment', 'assigned_to')
    op.drop_column('checklist_templates', 'description')
    op.drop_column('checklist_templates', 'name')
    # ### end Alembic commands ###
